"""
Handler para navega√ß√£o de m√≠dia em posts com m√∫ltiplas fotos/v√≠deos.
Implementa a funcionalidade de navega√ß√£o anterior/pr√≥ximo para media groups.
"""

import logging
from typing import List, Dict, Optional
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from services.post_service import PostService
from utils.error_handler import ErrorHandler

logger = logging.getLogger(__name__)

class MediaNavigationHandler:
    """Handler para navega√ß√£o de m√≠dia em posts."""
    
    def __init__(self, bot, post_service: PostService, error_handler: ErrorHandler):
        self.bot = bot
        self.post_service = post_service
        self.error_handler = error_handler
    
    async def handle_media_navigation(self, query: CallbackQuery):
        """Processa callbacks de navega√ß√£o de m√≠dia."""
        try:
            callback_data = query.data
            user_id = query.from_user.id
            
            # Parse do callback: nav_media_{post_id}_{action}_{current_index}
            parts = callback_data.split('_')
            if len(parts) < 4:
                await query.answer("‚ùå Dados de navega√ß√£o inv√°lidos.", show_alert=True)
                return
            
            post_id = parts[2]
            action = parts[3]  # 'prev' ou 'next'
            current_index = int(parts[4]) if len(parts) > 4 else 0
            
            # Obter dados do post
            post = await self.post_service.get_post(post_id)
            if not post:
                await query.answer("‚ùå Post n√£o encontrado.", show_alert=True)
                return
            
            media_files = post.get('media_files', [])
            if not media_files or len(media_files) <= 1:
                await query.answer("üì∑ Este post n√£o possui m√∫ltiplas m√≠dias.", show_alert=True)
                return
            
            # Calcular novo √≠ndice
            if action == 'prev':
                new_index = (current_index - 1) % len(media_files)
            elif action == 'next':
                new_index = (current_index + 1) % len(media_files)
            else:
                await query.answer("‚ùå A√ß√£o de navega√ß√£o inv√°lida.", show_alert=True)
                return
            
            # Obter m√≠dia atual
            current_media = media_files[new_index]
            media_type = current_media.get('type', 'image')
            file_id = current_media.get('file_id')
            
            if not file_id:
                await query.answer("‚ùå M√≠dia n√£o encontrada.", show_alert=True)
                return
            
            # Criar teclado de navega√ß√£o
            navigation_keyboard = self._create_navigation_keyboard(post_id, new_index, len(media_files))
            
            # Criar caption com informa√ß√µes
            caption = self._create_media_caption(post, new_index, len(media_files))
            
            # Editar mensagem com nova m√≠dia
            if media_type in ['image', 'photo']:
                await query.message.edit_media(
                    media=query.message.photo[-1].file_id if query.message.photo else file_id,
                    reply_markup=navigation_keyboard
                )
                # Como n√£o podemos editar o tipo de m√≠dia, enviamos nova mensagem
                await query.message.delete()
                await self.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=navigation_keyboard,
                    parse_mode='HTML'
                )
            elif media_type == 'video':
                await query.message.delete()
                await self.bot.send_video(
                    chat_id=query.message.chat.id,
                    video=file_id,
                    caption=caption,
                    reply_markup=navigation_keyboard,
                    parse_mode='HTML'
                )
            
            await query.answer(f"üì∑ M√≠dia {new_index + 1} de {len(media_files)}")
            
        except Exception as e:
            logger.error(f"Erro na navega√ß√£o de m√≠dia: {e}", exc_info=True)
            await query.answer("‚ùå Erro ao navegar pela m√≠dia.", show_alert=True)
    
    def _create_navigation_keyboard(self, post_id: str, current_index: int, total_media: int) -> InlineKeyboardMarkup:
        """Cria teclado de navega√ß√£o para m√≠dia."""
        buttons = []
        
        # Primeira linha: navega√ß√£o
        nav_buttons = []
        if total_media > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è Anterior",
                    callback_data=f"nav_media_{post_id}_prev_{current_index}"
                )
            )
            nav_buttons.append(
                InlineKeyboardButton(
                    text=f"{current_index + 1}/{total_media}",
                    callback_data="noop"  # Bot√£o informativo
                )
            )
            nav_buttons.append(
                InlineKeyboardButton(
                    text="Pr√≥ximo ‚ñ∂Ô∏è",
                    callback_data=f"nav_media_{post_id}_next_{current_index}"
                )
            )
        
        if nav_buttons:
            buttons.append(nav_buttons)
        
        # Segunda linha: a√ß√µes do post
        action_buttons = [
            InlineKeyboardButton(text="‚ù§Ô∏è Match", callback_data=f"match:post:{post_id}"),
            InlineKeyboardButton(text="‚≠ê Favoritar", callback_data=f"favorite:post:{post_id}"),
            InlineKeyboardButton(text="‚ÑπÔ∏è Info", callback_data=f"info:post:{post_id}")
        ]
        buttons.append(action_buttons)
        
        # Terceira linha: coment√°rios e fechar
        final_buttons = [
            InlineKeyboardButton(text="üí≠ Coment√°rios", callback_data=f"comments:post:{post_id}"),
            InlineKeyboardButton(text="‚ùå Fechar", callback_data="close_media_nav")
        ]
        buttons.append(final_buttons)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def _create_combined_keyboard(self, post_id: str, current_index: int, total_media: int, interaction_keyboard: InlineKeyboardMarkup) -> InlineKeyboardMarkup:
        """Cria teclado combinado com navega√ß√£o de m√≠dia e intera√ß√µes do post."""
        buttons = []
        
        # Primeira linha: navega√ß√£o de m√≠dia (apenas se h√° m√∫ltiplas m√≠dias)
        if total_media > 1:
            nav_buttons = [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è Anterior",
                    callback_data=f"nav_media_{post_id}_prev_{current_index}"
                ),
                InlineKeyboardButton(
                    text=f"{current_index + 1}/{total_media}",
                    callback_data="noop"
                ),
                InlineKeyboardButton(
                    text="Pr√≥ximo ‚ñ∂Ô∏è",
                    callback_data=f"nav_media_{post_id}_next_{current_index}"
                )
            ]
            buttons.append(nav_buttons)
        
        # Adicionar todas as linhas do teclado de intera√ß√£o original
        if interaction_keyboard and interaction_keyboard.inline_keyboard:
            for row in interaction_keyboard.inline_keyboard:
                buttons.append(row)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def _create_media_caption(self, post: Dict, current_index: int, total_media: int) -> str:
        """Cria caption para a m√≠dia com informa√ß√µes do post."""
        caption = f"üì∑ <b>M√≠dia {current_index + 1} de {total_media}</b>\n\n"
        
        # Adicionar informa√ß√µes do post
        if post.get('text'):
            caption += f"{post['text']}\n\n"
        
        # Adicionar informa√ß√µes do autor (an√¥nimo)
        author_info = post.get('author_info', {})
        if author_info:
            caption += f"üë§ {author_info.get('codename', 'An√¥nimo')} ¬∑ "
            caption += f"{author_info.get('category', 'Indefinido')} ¬∑ "
            caption += f"{author_info.get('state', 'BR')}\n"
        
        return caption
    
    async def create_media_group_with_navigation(self, chat_id: int, post_id: str, media_files: List[Dict], caption: str = "") -> bool:
        """Cria um media group com navega√ß√£o integrada."""
        try:
            if not media_files or len(media_files) <= 1:
                return False
            
            from aiogram.types import InputMediaPhoto, InputMediaVideo
            
            # Preparar media group
            media_group = []
            for i, media in enumerate(media_files):
                if media.get('type') in ['image', 'photo']:
                    media_item = InputMediaPhoto(
                        media=media['file_id'],
                        caption=caption if i == 0 else None,
                        parse_mode='HTML' if i == 0 else None
                    )
                elif media.get('type') == 'video':
                    media_item = InputMediaVideo(
                        media=media['file_id'],
                        caption=caption if i == 0 else None,
                        parse_mode='HTML' if i == 0 else None
                    )
                else:
                    continue
                media_group.append(media_item)
            
            if not media_group:
                return False
            
            # Enviar media group
            messages = await self.bot.send_media_group(chat_id, media_group)
            
            # Adicionar teclado de navega√ß√£o na primeira mensagem
            if messages:
                navigation_keyboard = self._create_navigation_keyboard(post_id, 0, len(media_files))
                try:
                    await self.bot.edit_message_reply_markup(
                        chat_id=chat_id,
                        message_id=messages[0].message_id,
                        reply_markup=navigation_keyboard
                    )
                except Exception as e:
                    logger.warning(f"N√£o foi poss√≠vel adicionar navega√ß√£o ao media group: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"Erro ao criar media group com navega√ß√£o: {e}")
            return False