"""
Handler para processar callbacks do menu principal.
Implementa a l√≥gica de navega√ß√£o e a√ß√µes do menu principal do bot.
"""

import logging
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from services.user_service import UserService
from services.post_service import PostService
from services.match_service import MatchService
from utils.ui_builder import UIBuilder
from utils.error_handler import ErrorHandler
from constants.callbacks import MenuCallbacks

logger = logging.getLogger(__name__)

class MenuHandler:
    """Handler para processar callbacks do menu principal."""
    
    def __init__(self, user_service: UserService = None, post_service: PostService = None, match_service: MatchService = None, ui_builder: UIBuilder = None, error_handler: ErrorHandler = None):
        # Permitir inje√ß√£o de depend√™ncias para consist√™ncia com outros handlers
        self.user_service = user_service or UserService()
        self.post_service = post_service or PostService()
        # Exigir MatchService injetado para garantir consist√™ncia com FirebaseService e simula√ß√£o
        if match_service is None:
            raise ValueError("MenuHandler requer 'match_service' injetado")
        self.match_service = match_service
        self.ui_builder = ui_builder or UIBuilder()
        self.error_handler = error_handler or ErrorHandler()
    
    async def handle_menu_callback(self, update, context=None):
        """Processa callbacks do menu principal."""
        if hasattr(update, 'callback_query'):
            query = update.callback_query
        else:
            query = update
            
        callback_data = query.data
        user_id = query.from_user.id
        
        try:
            await query.answer()
            
            # Log estruturado para depura√ß√£o
            logger.info(f"üè† MENU CALLBACK: user_id={user_id}, callback={callback_data}")
            
            # Roteamento baseado no callback
            if callback_data == "main_menu":
                logger.info(f"üè† MAIN MENU REQUEST: user_id={user_id}")
                await self._show_main_menu(query, user_id)
                
            # CALLBACKS PADRONIZADOS COM PREFIXO menu_ e menu:
            elif callback_data == MenuCallbacks.PROFILE or callback_data == "menu_profile" or callback_data == "menu:profile":
                logger.info(f"üë§ PROFILE MENU REQUEST: user_id={user_id}")
                await self._show_profile(query, user_id)
                
            elif callback_data == MenuCallbacks.SETTINGS or callback_data == "settings":
                logger.info(f"‚öôÔ∏è SETTINGS REQUEST: user_id={user_id}")
                await self._show_settings(query, user_id)
                
            elif callback_data == MenuCallbacks.FAVORITES or callback_data == "menu_favorites" or callback_data == "menu:favorites":
                logger.info(f"‚≠ê FAVORITES REQUEST: user_id={user_id}")
                await self._show_favorites(query, user_id)
                
            elif callback_data == MenuCallbacks.HELP or callback_data == "help":
                logger.info(f"‚ùì HELP REQUEST: user_id={user_id}")
                await self._show_help(query, user_id)
                
            elif callback_data == MenuCallbacks.CREATE_POST or callback_data == "menu_create_post" or callback_data == "start_post":
                logger.info(f"üìù CREATE POST REQUEST: user_id={user_id}")
                await self._start_create_post(query, user_id)
                
            elif callback_data == MenuCallbacks.VIEW_POSTS or callback_data == "menu_view_posts":
                logger.info(f"üëÄ VIEW POSTS REQUEST: user_id={user_id}")
                await self._view_posts(query, user_id)
                
            elif callback_data == MenuCallbacks.MY_MATCHES or callback_data == "menu_my_matches" or callback_data == "menu:matches":
                logger.info(f"üíï MATCHES REQUEST: user_id={user_id}")
                await self._show_matches(query, user_id)
                
            elif callback_data == MenuCallbacks.STATISTICS or callback_data == "menu_statistics":
                logger.info(f"üìä STATISTICS REQUEST: user_id={user_id}")
                await self._show_statistics(query, user_id)
                
            elif callback_data == "gallery" or callback_data == "menu:gallery":
                logger.info(f"üñºÔ∏è GALLERY REQUEST: user_id={user_id}")
                await self._show_gallery(query, user_id)
                
            # NOVOS CALLBACKS PARA AJUDA EXPANDIDA
            elif callback_data == "contact_support":
                await self._contact_support(query, user_id)
                
            elif callback_data == "show_faq":
                await self._show_faq(query, user_id)
                
            else:
                logger.warning(f"‚ùì UNKNOWN MENU CALLBACK: user_id={user_id}, callback={callback_data}")
                await query.answer("‚ùå Op√ß√£o n√£o reconhecida.", show_alert=True)
                
        except Exception as e:
            logger.error(f"üí• MENU CALLBACK ERROR: user_id={user_id}, callback={callback_data}, error={e}", exc_info=True)
            await self.error_handler.handle_callback_error(query, "Erro ao processar menu")
    
    async def _show_main_menu(self, query, user_id: int):
        """Exibe o menu principal."""
        try:
            user = await self.user_service.get_user(user_id)
            if not user:
                await query.edit_message_text("‚ùå Usu√°rio n√£o encontrado.")
                return
            
            # Construir mensagem de boas-vindas personalizada
            welcome_text = f"üè† **Menu Principal**\n\n"
            welcome_text += f"Ol√°, {user.get('name', 'Usu√°rio')}! üëã\n\n"
            welcome_text += "O que voc√™ gostaria de fazer hoje?\n\n"
            
            # Adicionar estat√≠sticas r√°pidas
            stats = await self._get_user_stats(user_id)
            if stats:
                welcome_text += f"üìä **Suas estat√≠sticas:**\n"
                welcome_text += f"‚Ä¢ Posts criados: {stats.get('posts_count', 0)}\n"
                welcome_text += f"‚Ä¢ Matches: {stats.get('matches_count', 0)}\n"
                welcome_text += f"‚Ä¢ Favoritos: {stats.get('favorites_count', 0)}\n\n"
            
            keyboard = await self._get_main_menu_keyboard(user_id)
            
            await query.edit_message_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir menu principal: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar menu principal.")
    
    async def _show_profile(self, query, user_id: int):
        """Busca e exibe os dados do perfil do utilizador conforme instru√ß√µes da auditoria."""
        try:
            user_data = await self.user_service.get_user_data(user_id)
            if user_data:
                profile_text = (
                    f"üë§ **O Seu Perfil**\n\n"
                    f"**Codinome:** {user_data.get('codename', 'N√£o definido')}\n"
                    f"**Estado:** {user_data.get('state', 'N√£o definido')}\n"
                    f"**Categoria:** {user_data.get('category', 'N√£o definida')}\n"
                    f"**Plano Atual:** {'Premium' if user_data.get('is_premium') else 'Lite'}"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è Editar Perfil", callback_data="edit_profile")],
                    [InlineKeyboardButton(text="üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
                ])
                
                await query.edit_message_text(profile_text, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await query.edit_message_text("N√£o foi poss√≠vel encontrar os dados do seu perfil.")
        except Exception as e:
            logger.error(f"Erro ao exibir o perfil para {user_id}: {e}", exc_info=True)
            await query.edit_message_text("Ocorreu um erro ao buscar o seu perfil.")

    async def _show_profile_menu(self, query, user_id: int):
        """Exibe o perfil do usu√°rio no contexto do menu (vers√£o original)."""
        try:
            # Obter dados reais do usu√°rio
            user_data = await self.user_service.get_user_data(user_id)
            
            if not user_data:
                text = "‚ùå **Erro ao carregar perfil**\n\n"
                text += "N√£o foi poss√≠vel encontrar seus dados.\n"
                text += "Tente fazer o onboarding novamente."
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ Refazer Onboarding", callback_data="restart_onboarding")],
                    [InlineKeyboardButton(text="üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
                ])
            else:
                # Construir perfil com dados reais
                name = user_data.get('name', 'N√£o informado')
                age = user_data.get('age', 'N√£o informado')
                location = user_data.get('location', 'N√£o informado')
                category = user_data.get('category', 'N√£o informado')
                interests = user_data.get('interests', [])
                bio = user_data.get('bio', 'Sem descri√ß√£o')
                
                text = f"üë§ **Seu Perfil**\n\n"
                text += f"**Nome:** {name}\n"
                text += f"**Idade:** {age}\n"
                text += f"**Localiza√ß√£o:** {location}\n"
                text += f"**Categoria:** {category.title()}\n"
                
                if interests:
                    interests_text = ", ".join(interests)
                    text += f"**Interesses:** {interests_text}\n"
                
                text += f"\n**Bio:**\n{bio}\n\n"
                
                # Estat√≠sticas b√°sicas
                stats = await self._get_user_stats(user_id)
                text += f"**Estat√≠sticas:**\n"
                text += f"‚Ä¢ Posts criados: {stats.get('posts_count', 0)}\n"
                text += f"‚Ä¢ Matches: {stats.get('matches_count', 0)}\n"
                text += f"‚Ä¢ Favoritos: {stats.get('favorites_count', 0)}\n"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è Editar Perfil", callback_data="edit_profile")],
                    [InlineKeyboardButton(text="üì∏ Alterar Foto", callback_data="change_photo")],
                    [InlineKeyboardButton(text="üìä Ver Estat√≠sticas", callback_data=MenuCallbacks.STATISTICS)],
                    [InlineKeyboardButton(text="üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
                ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir perfil: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar perfil.")
    
    async def _show_settings(self, query, user_id: int):
        """Exibe as configura√ß√µes do usu√°rio."""
        try:
            text = "‚öôÔ∏è **Configura√ß√µes**\n\n"
            text += "Personalize sua experi√™ncia no Liberall:"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîî Notifica√ß√µes", callback_data="settings_notifications")],
                [InlineKeyboardButton(text="üîí Privacidade", callback_data="settings_privacy")],
                [InlineKeyboardButton(text="üé® Tema", callback_data="settings_theme")],
                [InlineKeyboardButton(text="üìç Localiza√ß√£o", callback_data="settings_location")],
                [InlineKeyboardButton(text="üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir configura√ß√µes: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar configura√ß√µes.")
    
    async def _show_gallery(self, query, user_id: int):
        """Exibe a galeria de posts do usu√°rio."""
        try:
            # Obter posts do usu√°rio
            user_posts = await self.post_service.get_user_posts(user_id)
            
            text = "üñºÔ∏è **Sua Galeria**\n\n"
            
            if not user_posts:
                text += "Voc√™ ainda n√£o criou nenhum post.\n"
                text += "Comece criando seu primeiro conte√∫do! üöÄ\n\n"
                text += "üí° **Dica:** Use o bot√£o 'Criar Post' no menu principal."
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù Criar Primeiro Post", callback_data=MenuCallbacks.CREATE_POST)],
                    [InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
                ])
            else:
                text += f"Voc√™ tem **{len(user_posts)}** posts criados:\n\n"
                
                buttons = []
                for i, post in enumerate(user_posts[:5]):  # Mostrar apenas os 5 primeiros
                    post_title = post.get('title', f'Post {i+1}')[:25]
                    post_type = post.get('type', 'texto')
                    matches_count = post.get('matches_count', 0)
                    views_count = post.get('views_count', 0)
                    
                    text += f"üìÑ **{post_title}**\n"
                    text += f"   üì± Tipo: {post_type.title()}\n"
                    text += f"   üíï {matches_count} matches\n"
                    text += f"   üëÄ {views_count} visualiza√ß√µes\n\n"
                    
                    buttons.append([InlineKeyboardButton(
                        text=f"üëÄ Ver '{post_title}'",
                        callback_data=f"view_post_{post['id']}"
                    )])
                
                if len(user_posts) > 5:
                    buttons.append([InlineKeyboardButton(text="üìã Ver Todos os Posts", callback_data="view_all_user_posts")])
                
                buttons.extend([
                    [InlineKeyboardButton(text="üìù Criar Novo Post", callback_data=MenuCallbacks.CREATE_POST)],
                    [InlineKeyboardButton(text="üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
                ])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir galeria: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar galeria.")
    
    async def _show_favorites(self, query, user_id: int):
        """Exibe os posts favoritos do usu√°rio."""
        try:
            # Obter favoritos reais do banco de dados
            favorites = await self.post_service.get_user_favorites(user_id)
            
            if not favorites:
                text = "‚≠ê **Seus Favoritos**\n\n"
                text += "Voc√™ ainda n√£o tem posts favoritos.\n"
                text += "Explore posts e adicione aos favoritos! üí´"
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç Explorar Posts", callback_data=MenuCallbacks.VIEW_POSTS)],
                    [InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
                ])
            else:
                text = f"‚≠ê **Seus Favoritos** ({len(favorites)} posts)\n\n"
                
                buttons = []
                for i, post in enumerate(favorites[:5]):  # Mostrar apenas os 5 primeiros
                    post_title = post.get('title', f'Post {i+1}')[:30]
                    creator_name = post.get('creator_name', 'An√¥nimo')
                    text += f"üìÑ **{post_title}**\n"
                    text += f"   üë§ Por: {creator_name}\n"
                    text += f"   üìÖ {post.get('created_at', 'Data n√£o dispon√≠vel')}\n\n"
                    
                    buttons.append([InlineKeyboardButton(
                        f"üëÄ Ver Post", 
                        callback_data=f"view_post_{post['id']}"
                    )])
                
                if len(favorites) > 5:
                    buttons.append([InlineKeyboardButton("üìã Ver Todos os Favoritos", callback_data="view_all_favorites")])
                
                buttons.append([InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)])
                keyboard = InlineKeyboardMarkup(buttons)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir favoritos: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar favoritos.")
    
    async def _show_help(self, query, user_id: int):
        """Exibe a ajuda completa do bot."""
        try:
            help_text = f"‚ùì **Central de Ajuda - LiberALL**\n\n"
            help_text += "**üöÄ Como usar o LiberALL:**\n\n"
            
            help_text += "üè† **Menu Principal**\n"
            help_text += "   ‚Ä¢ Acesse todas as funcionalidades principais\n"
            help_text += "   ‚Ä¢ Veja suas estat√≠sticas em tempo real\n\n"
            
            help_text += "üìù **Criar Post**\n"
            help_text += "   ‚Ä¢ Compartilhe fotos, v√≠deos ou textos\n"
            help_text += "   ‚Ä¢ Defina pre√ßos para monetiza√ß√£o\n"
            help_text += "   ‚Ä¢ Escolha sua audi√™ncia\n\n"
            
            help_text += "üëÄ **Explorar Posts**\n"
            help_text += "   ‚Ä¢ Descubra conte√∫dos de outros usu√°rios\n"
            help_text += "   ‚Ä¢ Filtre por regi√£o ou categoria\n"
            help_text += "   ‚Ä¢ Interaja e fa√ßa matches\n\n"
            
            help_text += "üíï **Sistema de Matches**\n"
            help_text += "   ‚Ä¢ Conecte-se com pessoas interessantes\n"
            help_text += "   ‚Ä¢ Inicie conversas privadas\n"
            help_text += "   ‚Ä¢ Gerencie suas conex√µes\n\n"
            
            help_text += "‚≠ê **Favoritos**\n"
            help_text += "   ‚Ä¢ Salve posts que voc√™ gosta\n"
            help_text += "   ‚Ä¢ Acesse rapidamente seus conte√∫dos preferidos\n\n"
            
            help_text += "**üí° Dicas importantes:**\n"
            help_text += "‚Ä¢ Mantenha seu perfil atualizado\n"
            help_text += "‚Ä¢ Seja respeitoso nas intera√ß√µes\n"
            help_text += "‚Ä¢ Use hashtags para maior alcance\n"
            help_text += "‚Ä¢ Explore diferentes tipos de conte√∫do\n\n"
            
            help_text += "**Precisa de mais ajuda?**\n"
            help_text += "Nossa equipe est√° sempre dispon√≠vel! üí¨"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìû Contatar Suporte", callback_data="contact_support")],
                [InlineKeyboardButton("‚ùì Perguntas Frequentes", callback_data="show_faq")],
                [InlineKeyboardButton("üìã Guia Completo", callback_data="show_complete_guide")],
                [InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
            ])
            
            await query.edit_message_text(
                help_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir ajuda: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar ajuda.")
    
    async def _contact_support(self, query, user_id: int):
        """Exibe op√ß√µes de contato com suporte."""
        try:
            text = "üìû **Contatar Suporte**\n\n"
            text += "Escolha a melhor forma de entrar em contato:\n\n"
            text += "**üìß Email:** suporte@liberall.com\n"
            text += "**üí¨ Telegram:** @LiberallSupport\n"
            text += "**üì± WhatsApp:** +55 11 99999-9999\n\n"
            text += "**‚è∞ Hor√°rio de atendimento:**\n"
            text += "Segunda a Sexta: 9h √†s 18h\n"
            text += "S√°bados: 9h √†s 14h\n\n"
            text += "**‚ö° Para emerg√™ncias:**\n"
            text += "Use o bot√£o 'Suporte Urgente' abaixo"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üö® Suporte Urgente", callback_data="urgent_support")],
                [InlineKeyboardButton("üìß Enviar Email", callback_data="send_email_support")],
                [InlineKeyboardButton("üí¨ Chat ao Vivo", callback_data="live_chat_support")],
                [InlineKeyboardButton("üîô Voltar √† Ajuda", callback_data=MenuCallbacks.HELP)]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir contato de suporte: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar op√ß√µes de suporte.")
    
    async def _show_faq(self, query, user_id: int):
        """Exibe perguntas frequentes."""
        try:
            text = "‚ùì **Perguntas Frequentes**\n\n"
            
            text += "**üîê Como funciona a privacidade?**\n"
            text += "Seus dados s√£o protegidos com criptografia de ponta. Voc√™ controla quem v√™ seu conte√∫do.\n\n"
            
            text += "**üí∞ Como funciona a monetiza√ß√£o?**\n"
            text += "Defina pre√ßos para seus posts. Receba pagamentos via PIX instantaneamente.\n\n"
            
            text += "**üíï Como funcionam os matches?**\n"
            text += "Quando algu√©m interage com seu post, voc√™s podem se conectar e conversar.\n\n"
            
            text += "**üì± Posso usar em outros dispositivos?**\n"
            text += "Sim! Acesse pelo Telegram em qualquer dispositivo.\n\n"
            
            text += "**üö´ Como reportar conte√∫do inadequado?**\n"
            text += "Use o bot√£o 'Reportar' em qualquer post ou entre em contato conosco.\n\n"
            
            text += "**üí≥ Como recebo meus pagamentos?**\n"
            text += "Configure sua chave PIX no perfil. Pagamentos s√£o instant√¢neos.\n\n"
            
            text += "**üîÑ Posso editar posts publicados?**\n"
            text += "Sim, acesse 'Minha Galeria' e selecione o post para editar.\n\n"
            
            text += "**N√£o encontrou sua d√∫vida?**\n"
            text += "Entre em contato com nosso suporte!"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìû Contatar Suporte", callback_data="contact_support")],
                [InlineKeyboardButton("üìã Mais Perguntas", callback_data="more_faq")],
                [InlineKeyboardButton("üîô Voltar √† Ajuda", callback_data=MenuCallbacks.HELP)]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir FAQ: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar FAQ.")
    
    async def _start_create_post(self, query, user_id: int):
        """Inicia o processo de cria√ß√£o de post."""
        try:
            # Verificar se o usu√°rio pode criar posts
            user = await self.user_service.get_user(user_id)
            if not user:
                await query.edit_message_text("‚ùå Usu√°rio n√£o encontrado.")
                return
            
            # Redirecionar para o handler de postagem
            text = "üìù **Criar Novo Post**\n\n"
            text += "Vamos criar seu post! Escolha o tipo de conte√∫do:\n\n"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì∑ Post com Imagem", callback_data="post_type_image")],
                [InlineKeyboardButton("üìπ Post com V√≠deo", callback_data="post_type_video")],
                [InlineKeyboardButton("üìù Post Apenas Texto", callback_data="post_type_text")],
                [InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao iniciar cria√ß√£o de post: {e}")
            await query.edit_message_text("‚ùå Erro ao iniciar cria√ß√£o de post.")
    
    async def _view_posts(self, query, user_id: int):
        """Exibe posts dispon√≠veis para visualiza√ß√£o."""
        try:
            # Obter posts reais do banco de dados
            recent_posts = await self.post_service.get_recent_posts(limit=5)
            
            text = "üëÄ **Explorar Posts**\n\n"
            
            if recent_posts:
                text += "**Posts Recentes:**\n\n"
                for post in recent_posts:
                    post_title = post.get('title', 'Sem t√≠tulo')[:25]
                    creator_name = post.get('creator_name', 'An√¥nimo')
                    text += f"üìÑ **{post_title}**\n"
                    text += f"   üë§ {creator_name}\n"
                    text += f"   üíï {post.get('matches_count', 0)} matches\n\n"
            else:
                text += "Ainda n√£o h√° posts dispon√≠veis.\n"
                text += "Seja o primeiro a criar conte√∫do! üöÄ\n\n"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üî• Posts em Destaque", callback_data="view_featured_posts")],
                [InlineKeyboardButton("üÜï Posts Recentes", callback_data="view_recent_posts")],
                [InlineKeyboardButton("üìç Posts da Minha Regi√£o", callback_data="view_local_posts")],
                [InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir posts: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar posts.")
    
    async def _show_matches(self, query, user_id: int):
        """Exibe os matches do usu√°rio."""
        try:
            # Obter matches reais do banco de dados
            matches = await self.match_service.get_user_matches(user_id)
            
            if not matches:
                text = "üíï **Seus Matches**\n\n"
                text += "Voc√™ ainda n√£o tem matches.\n"
                text += "Explore posts e fa√ßa conex√µes! ‚ú®\n\n"
                text += "üí° **Dica:** Interaja com posts que te interessam para criar matches!"
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç Explorar Posts", callback_data=MenuCallbacks.VIEW_POSTS)],
                    [InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
                ])
            else:
                text = f"üíï **Seus Matches** ({len(matches)} conex√µes)\n\n"
                
                buttons = []
                for i, match in enumerate(matches[:5]):  # Mostrar apenas os 5 primeiros
                    match_name = match.get('name', f'Match {i+1}')
                    post_title = match.get('post_title', 'Post sem t√≠tulo')[:20]
                    match_date = match.get('created_at', 'Data n√£o dispon√≠vel')
                    
                    text += f"üíï **{match_name}**\n"
                    text += f"   üìÑ Post: {post_title}\n"
                    text += f"   üìÖ Match em: {match_date}\n"
                    text += f"   üí¨ Status: {match.get('status', 'Ativo')}\n\n"
                    
                    buttons.append([InlineKeyboardButton(
                        f"üí¨ Conversar com {match_name}", 
                        callback_data=f"chat_match_{match['id']}"
                    )])
                
                if len(matches) > 5:
                    buttons.append([InlineKeyboardButton("üìã Ver Todos os Matches", callback_data="view_all_matches")])
                
                buttons.append([InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)])
                keyboard = InlineKeyboardMarkup(buttons)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir matches: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar matches.")
    
    async def _show_statistics(self, query, user_id: int):
        """Exibe estat√≠sticas do usu√°rio."""
        try:
            stats = await self._get_user_stats(user_id)
            
            text = f"üìä **Suas Estat√≠sticas**\n\n"
            
            if stats:
                text += f"**Atividade Geral:**\n"
                text += f"‚Ä¢ Posts criados: {stats.get('posts_count', 0)}\n"
                text += f"‚Ä¢ Matches recebidos: {stats.get('matches_count', 0)}\n"
                text += f"‚Ä¢ Posts favoritados: {stats.get('favorites_count', 0)}\n"
                text += f"‚Ä¢ Visualiza√ß√µes totais: {stats.get('views_count', 0)}\n\n"
                
                text += f"**Esta semana:**\n"
                text += f"‚Ä¢ Novos matches: {stats.get('weekly_matches', 0)}\n"
                text += f"‚Ä¢ Posts criados: {stats.get('weekly_posts', 0)}\n"
                text += f"‚Ä¢ Visualiza√ß√µes: {stats.get('weekly_views', 0)}\n"
            else:
                text += "Ainda n√£o h√° estat√≠sticas dispon√≠veis.\n"
                text += "Comece a usar o bot para ver seus dados! üìà"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìà Estat√≠sticas Detalhadas", callback_data="detailed_stats")],
                [InlineKeyboardButton("üîô Voltar ao Menu", callback_data=MenuCallbacks.MAIN_MENU)]
            ])
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro ao exibir estat√≠sticas: {e}")
            await query.edit_message_text("‚ùå Erro ao carregar estat√≠sticas.")
    
    async def _get_main_menu_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """Constr√≥i o teclado do menu principal com callbacks padronizados."""
        try:
            user = await self.user_service.get_user(user_id)
            
            buttons = [
                [InlineKeyboardButton(text="üìù Criar Post", callback_data="menu_create_post")],
                [InlineKeyboardButton(text="üëÄ Ver Posts", callback_data="menu_view_posts")],
                [InlineKeyboardButton(text="üíï Meus Matches", callback_data="menu_my_matches")],
                [InlineKeyboardButton(text="‚≠ê Favoritos", callback_data="menu_favorites")],
                [
                    InlineKeyboardButton(text="üë§ Perfil", callback_data="menu_profile"),
                    InlineKeyboardButton(text="üñºÔ∏è Galeria", callback_data="gallery")
                ],
                [
                    InlineKeyboardButton(text="üìä Estat√≠sticas", callback_data="menu_statistics"),
                    InlineKeyboardButton(text="‚öôÔ∏è Configura√ß√µes", callback_data="settings")
                ],
                [InlineKeyboardButton(text="‚ùì Ajuda", callback_data="help")]
            ]
            
            return InlineKeyboardMarkup(inline_keyboard=buttons)
            
        except Exception as e:
            logger.error(f"Erro ao construir teclado do menu: {e}")
            # Retornar teclado b√°sico em caso de erro
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô Menu Principal", callback_data="main_menu")]
            ])
    
    async def _get_user_stats(self, user_id: int) -> dict:
        """Obt√©m estat√≠sticas reais do usu√°rio."""
        try:
            # Obter estat√≠sticas reais dos servi√ßos
            posts_count = await self.post_service.get_user_posts_count(user_id)
            matches_count = await self.match_service.get_user_matches_count(user_id)
            favorites_count = await self.post_service.get_user_favorites_count(user_id)
            
            # Estat√≠sticas semanais
            weekly_stats = await self.post_service.get_weekly_stats(user_id)
            
            return {
                'posts_count': posts_count,
                'matches_count': matches_count,
                'favorites_count': favorites_count,
                'views_count': weekly_stats.get('total_views', 0),
                'weekly_matches': weekly_stats.get('weekly_matches', 0),
                'weekly_posts': weekly_stats.get('weekly_posts', 0),
                'weekly_views': weekly_stats.get('weekly_views', 0)
            }
        except Exception as e:
            logger.error(f"Erro ao obter estat√≠sticas do usu√°rio {user_id}: {e}")
            # Retornar dados padr√£o em caso de erro
            return {
                'posts_count': 0,
                'matches_count': 0,
                'favorites_count': 0,
                'views_count': 0,
                'weekly_matches': 0,
                'weekly_posts': 0,
                'weekly_views': 0
            }