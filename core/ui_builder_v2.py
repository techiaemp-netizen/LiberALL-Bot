"""
UI Builder V2 - Teclados combinados e renderiza√ß√£o de posts.

Implementa teclados que combinam navega√ß√£o + a√ß√µes sem sobrescrever.
Suporta dois modos de renderiza√ß√£o:
- carousel: 1 mensagem com primeira m√≠dia + navega√ß√£o inline
- album+panel: √°lbum sem teclado + painel separado com teclado
"""
import os
from typing import List, Dict, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from constants.normalized_callbacks import NormalizedCallbacks

# Configura√ß√£o do modo de renderiza√ß√£o
POST_RENDER_MODE = os.getenv('POST_RENDER_MODE', 'carousel')  # carousel | album+panel


class UIBuilderV2:
    """
    Construtor de interfaces com teclados combinados.
    
    Garante que navega√ß√£o e a√ß√µes sempre apare√ßam juntas,
    sem sobrescrita.
    """
    
    def __init__(self, bot_username: str):
        """
        Inicializa o UI Builder.
        
        Args:
            bot_username: Username do bot (para deep links)
        """
        self.bot_username = bot_username
    
    def create_media_nav_keyboard(
        self,
        post_id: str,
        current_index: int,
        total_media: int
    ) -> List[List[InlineKeyboardButton]]:
        """
        Cria linha de navega√ß√£o de m√≠dia (‚óÄÔ∏è X/Y ‚ñ∂Ô∏è).
        
        Args:
            post_id: ID do post
            current_index: √çndice atual (0-based)
            total_media: Total de m√≠dias
            
        Returns:
            Lista com uma linha de bot√µes de navega√ß√£o
        """
        if total_media <= 1:
            return []
        
        buttons = []
        
        # Bot√£o anterior
        if current_index > 0:
            buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=NormalizedCallbacks.media_prev(post_id, current_index)
                )
            )
        
        # Indicador de posi√ß√£o (n√£o clic√°vel)
        buttons.append(
            InlineKeyboardButton(
                text=f"{current_index + 1}/{total_media}",
                callback_data="noop"
            )
        )
        
        # Bot√£o pr√≥ximo
        if current_index < total_media - 1:
            buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=NormalizedCallbacks.media_next(post_id, current_index)
                )
            )
        
        return [buttons] if buttons else []
    
    def create_post_actions_keyboard(
        self,
        post_id: str,
        counts: Dict[str, int],
        viewer_user_id: int
    ) -> List[List[InlineKeyboardButton]]:
        """
        Cria teclado de a√ß√µes do post.
        
        Args:
            post_id: ID do post
            counts: Contadores {comments, favorites, matches}
            viewer_user_id: ID do usu√°rio visualizando
            
        Returns:
            Lista de linhas de bot√µes
        """
        comments_count = counts.get('comments', 0)
        favorites_count = counts.get('favorites', 0)
        matches_count = counts.get('matches', 0)
        
        # Linha 1: Match, Galeria, Favoritar
        row1 = [
            InlineKeyboardButton(
                text="‚ù§Ô∏è Match",
                callback_data=NormalizedCallbacks.match_post(post_id)
            ),
            InlineKeyboardButton(
                text="üñºÔ∏è Ver Galeria",
                callback_data=NormalizedCallbacks.gallery_post(post_id)
            ),
            InlineKeyboardButton(
                text="‚≠ê Favoritar",
                callback_data=NormalizedCallbacks.favorite_post(post_id)
            )
        ]
        
        # Linha 2: Info, Coment√°rios (com contador)
        row2 = [
            InlineKeyboardButton(
                text="‚ÑπÔ∏è Info",
                callback_data=NormalizedCallbacks.info_post(post_id)
            ),
            InlineKeyboardButton(
                text=f"üí≠ Coment√°rios ({comments_count})",
                callback_data=NormalizedCallbacks.comments_post(post_id)
            )
        ]
        
        # Linha 3: Postar, Menu
        row3 = [
            InlineKeyboardButton(
                text="‚ûï Postar na Comunidade",
                callback_data=NormalizedCallbacks.posting_create(viewer_user_id)
            ),
            InlineKeyboardButton(
                text="‚ò∞ Acessar Menu",
                callback_data=NormalizedCallbacks.menu_main(viewer_user_id)
            )
        ]
        
        return [row1, row2, row3]
    
    def create_combined_keyboard(
        self,
        post_id: str,
        counts: Dict[str, int],
        viewer_user_id: int,
        current_index: int = 0,
        total_media: int = 1
    ) -> InlineKeyboardMarkup:
        """
        Cria teclado combinado: navega√ß√£o + a√ß√µes.
        
        Args:
            post_id: ID do post
            counts: Contadores
            viewer_user_id: ID do usu√°rio visualizando
            current_index: √çndice atual da m√≠dia
            total_media: Total de m√≠dias
            
        Returns:
            InlineKeyboardMarkup completo
        """
        # Linha de navega√ß√£o (se houver m√∫ltiplas m√≠dias)
        nav_rows = self.create_media_nav_keyboard(post_id, current_index, total_media)
        
        # Linhas de a√ß√µes
        action_rows = self.create_post_actions_keyboard(post_id, counts, viewer_user_id)
        
        # Combinar: navega√ß√£o primeiro, depois a√ß√µes
        all_rows = nav_rows + action_rows
        
        return InlineKeyboardMarkup(inline_keyboard=all_rows)
    
    def create_control_panel_keyboard(self) -> InlineKeyboardMarkup:
        """
        Cria painel de controle para grupos (deep links).
        
        Returns:
            InlineKeyboardMarkup com deep links
        """
        buttons = [
            [
                InlineKeyboardButton(
                    text="üí¨",
                    url=f"https://t.me/{self.bot_username}?start=postar"
                ),
                InlineKeyboardButton(
                    text="üìé",
                    url=f"https://t.me/{self.bot_username}?start=postar_midia"
                ),
                InlineKeyboardButton(
                    text="üîä",
                    url=f"https://t.me/{self.bot_username}?start=postar_audio"
                ),
                InlineKeyboardButton(
                    text="‚ò∞",
                    url=f"https://t.me/{self.bot_username}?start=perfil"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def create_monetization_teaser_keyboard(
        self,
        post_id: str,
        price: float,
        creator_affiliate_link: str,
        premium_price: float = 9.99
    ) -> InlineKeyboardMarkup:
        """
        Cria teclado para teaser de conte√∫do monetizado no Lite.
        
        Args:
            post_id: ID do post
            price: Pre√ßo do conte√∫do
            creator_affiliate_link: Link de afiliado do criador
            premium_price: Pre√ßo do plano Premium
            
        Returns:
            InlineKeyboardMarkup com CTAs
        """
        buttons = [
            [
                InlineKeyboardButton(
                    text=f"üí∞ Comprar por R$ {price:.2f}",
                    url=creator_affiliate_link
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"‚ú® Assinar Premium - R$ {premium_price:.2f}/m√™s",
                    url=f"https://t.me/{self.bot_username}?start=subscribe_premium"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def create_comments_keyboard(
        self,
        post_id: str,
        has_more: bool = False,
        page: int = 0
    ) -> InlineKeyboardMarkup:
        """
        Cria teclado para visualiza√ß√£o de coment√°rios.
        
        Args:
            post_id: ID do post
            has_more: Se h√° mais coment√°rios
            page: P√°gina atual
            
        Returns:
            InlineKeyboardMarkup
        """
        buttons = []
        
        # Bot√£o para escrever coment√°rio
        buttons.append([
            InlineKeyboardButton(
                text="‚úçÔ∏è Escrever Coment√°rio",
                callback_data=NormalizedCallbacks.comments_write(post_id)
            )
        ])
        
        # Navega√ß√£o de p√°ginas (se houver mais)
        if has_more:
            buttons.append([
                InlineKeyboardButton(
                    text="üìÑ Carregar Mais",
                    callback_data=NormalizedCallbacks.comments_list(post_id, page + 1)
                )
            ])
        
        # Bot√£o fechar
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå Fechar",
                callback_data="close_comments"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def create_gallery_keyboard(
        self,
        user_id: int,
        posts: List[str],
        page: int = 0,
        has_more: bool = False
    ) -> InlineKeyboardMarkup:
        """
        Cria teclado para galeria de posts de um usu√°rio.
        
        Args:
            user_id: ID do usu√°rio
            posts: Lista de IDs de posts
            page: P√°gina atual
            has_more: Se h√° mais posts
            
        Returns:
            InlineKeyboardMarkup
        """
        buttons = []
        
        # Bot√µes de posts (at√© 5 por p√°gina)
        for i, post_id in enumerate(posts[:5], 1):
            buttons.append([
                InlineKeyboardButton(
                    text=f"üì∏ Post {i}",
                    callback_data=f"view:post:{post_id}"
                )
            ])
        
        # Navega√ß√£o
        nav_row = []
        if page > 0:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è Anterior",
                    callback_data=NormalizedCallbacks.menu_gallery(user_id, page - 1)
                )
            )
        if has_more:
            nav_row.append(
                InlineKeyboardButton(
                    text="Pr√≥xima ‚ñ∂Ô∏è",
                    callback_data=NormalizedCallbacks.menu_gallery(user_id, page + 1)
                )
            )
        
        if nav_row:
            buttons.append(nav_row)
        
        # Voltar
        buttons.append([
            InlineKeyboardButton(
                text="üîô Voltar",
                callback_data=NormalizedCallbacks.back_main()
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def create_main_menu_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """
        Cria teclado do menu principal.
        
        Args:
            user_id: ID do usu√°rio
            
        Returns:
            InlineKeyboardMarkup
        """
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚ûï Postar",
                    callback_data=NormalizedCallbacks.posting_create(user_id)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üñºÔ∏è Minha Galeria",
                    callback_data=NormalizedCallbacks.menu_gallery(user_id)
                ),
                InlineKeyboardButton(
                    text="‚≠ê Favoritos",
                    callback_data=NormalizedCallbacks.menu_favorites(user_id)
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ù§Ô∏è Meus Matches",
                    callback_data=NormalizedCallbacks.menu_matches(user_id)
                ),
                InlineKeyboardButton(
                    text="‚öôÔ∏è Configura√ß√µes",
                    callback_data=NormalizedCallbacks.menu_settings(user_id)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üíé Plano",
                    callback_data=NormalizedCallbacks.menu_plan(user_id)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë§ Detalhar meu Perfil",
                    callback_data=NormalizedCallbacks.profile_detail(user_id)
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)


# Fun√ß√£o auxiliar para criar inst√¢ncia
def create_ui_builder(bot_username: str) -> UIBuilderV2:
    """
    Cria inst√¢ncia do UI Builder V2.
    
    Args:
        bot_username: Username do bot
        
    Returns:
        Inst√¢ncia do UIBuilderV2
    """
    return UIBuilderV2(bot_username)

